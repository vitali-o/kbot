name: KBOT-CICD

on:
  push:
    branches:
      - develop

jobs:
  ci:
    name: CI
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
    
      - name: Run test
        run: make test
      
      - name: Docker Login
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build&Push
        env:
          APP: "kbot"
          REGISTRY: "ghcr.io/${{ github.actor }}"
        run: make image push
  cd:
    name: CD
    needs: ci
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: echo "VERSION=$(git describe --tags --abbrev=0)-$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - uses: mikefarah/yq@master
        with:
          cmd: yq -i '.image.tag = strenv(VERSION)' helm/values.yaml && yq -i '.appVersion = strenv(VERSION)' helm/Chart.yaml

      - run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git commit -am "update to version $VERSION"
          git push



      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd-linux-amd64
          sudo mv argocd-linux-amd64 /usr/local/bin/argocd
          
      - name: Login to ArgoCD
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure
    
      - name: Check if ArgoCD Application exists
        id: check-app
        run: |
          if argocd app get kbot > /dev/null 2>&1; then
            echo "app_exists=true" >> $GITHUB_ENV
          else
            echo "app_exists=false" >> $GITHUB_ENV
          fi
    
      - name: Create ArgoCD Application if not exists
        if: env.app_exists == 'false'
        run: |
          argocd app create kbot \
            --repo https://github.com/vitali-o/kbot.git \
            --path helm \
            --dest-server https://kubernetes.default.svc \
            --dest-namespace default \
            --revision develop \
            --sync-policy automated
    
      - name: Sync ArgoCD Application
        run: |
          argocd app sync kbot --prune